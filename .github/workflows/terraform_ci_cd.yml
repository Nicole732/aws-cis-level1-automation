name: Terraform CI/CD Pipeline with Security Checks

on:
  push:
    branches:
      - main

  pull_request:
    types: [closed]
    branches:
      - main

env:
  TF_WORKSPACE: default
  AWS_REGION: us-east-1

jobs:
  # ----------------------------
  # Security Linting & Analysis
  # ----------------------------
  lint-security:
    # Only for feature branches
    runs-on: ubuntu-latest
    name: Run Terraform Lint & Security Tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # TFLint (non-blocking)
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        working-directory: env/dev
        continue-on-error: true
        run: tflint --recursive

      # TFSEC (blocking)
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: env/dev
          soft_fail: false
        env:
          TFSEC_EXIT_CODE: 1

      # Checkov (blocking)
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: env/dev
          soft_fail: false
        continue-on-error: true

      # Trivy (non-blocking)
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.50.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.50.1_Linux-64bit.deb

      - name: Run Trivy
        run: trivy config env/dev --severity HIGH,CRITICAL --exit-code 1
        continue-on-error: true

  # ----------------------------
  # Terraform Plan & Apply
  # ----------------------------
  terraform:
    name: Validate & Deploy Terraform
    runs-on: ubuntu-latest
    needs: lint-security  # üëà Enforce dependency on security checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Format
        working-directory: env/dev
        run: terraform fmt -check -recursive || echo "‚ö†Ô∏è Some files are not formatted"

      - name: Terraform Init
        working-directory: env/dev
        run: terraform init

      - name: Terraform Validate
        working-directory: env/dev
        run: terraform validate

      - name: Terraform Plan
        working-directory: env/dev
        run: |
          terraform plan \
            -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: env/dev
        run: terraform apply -parallelism=1 -auto-approve tfplan
